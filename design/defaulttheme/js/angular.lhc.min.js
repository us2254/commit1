var phonecatApp = angular.module("lhcApp", ["lhcAppServices", "lhcAppControllers"]), services = angular.module("lhcAppServices", []), lhcAppControllers = angular.module("lhcAppControllers", ["checklist-model"]); angular.element(document).ready(function () { var t = angular.element(document.querySelector("form")); t.triggerHandler("$destroy") }), services.factory("LiveHelperChatFactory", ["$http", "$q", function (t, e) { return this.loadChatList = function (i) { var a = e.defer(); return t.get(WWW_DIR_JAVASCRIPT + "chat/syncadmininterface" + i).success(function (t) { "undefined" != typeof t.error_url ? document.location = t.error_url : a.resolve(t) }).error(function () { a.reject("error") }), a.promise }, this.truncate = function (t, e, i) { return isNaN(e) && (e = 10), void 0 === i && (i = "..."), t.length <= e || t.length - i.length <= e ? t : String(t).substring(0, e - i.length) + i }, this }]), lhcAppControllers.controller("LiveHelperChatCtrl", ["$scope", "$http", "$location", "$rootScope", "$log", "$interval", "LiveHelperChatFactory", function (t, e, i, a, n, s, o) { t.predicate = "last_visit", t.pending_chats = {}, t.pending_chats_expanded = !0, t.active_chats = {}, t.active_chats_expanded = !0, t.my_active_chats_expanded = !0, t.closed_chats = {}, t.closed_chats_expanded = !0, t.unread_chats = {}, t.unread_chats_expanded = !0, t.transfer_dep_chats = {}, t.transfer_chats = {}, t.timeoutControl = null, t.setTimeoutEnabled = !0, t.custom_list_1_expanded = !0, t.custom_list_2_expanded = !0, t.custom_list_3_expanded = !0, t.custom_list_4_expanded = !0; var l = this; this.restoreLocalSetting = function (t, e, i) { if (localStorage) { var a = localStorage.getItem(t); return null !== a ? 1 == i ? a.split(",") : a : e } }, this.limita = this.restoreLocalSetting("limita", 10, !1), this.limitu = this.restoreLocalSetting("limitu", 10, !1), this.limitp = this.restoreLocalSetting("limitp", 10, !1), this.limito = this.restoreLocalSetting("limito", 10, !1), this.lastidEvent = 0, this.actived = this.restoreLocalSetting("actived", [], !0), this.activedNames = [], this.departmentd = this.restoreLocalSetting("departmentd", [], !0), this.departmentdNames = [], this.unreadd = this.restoreLocalSetting("unreadd", [], !0), this.unreaddNames = [], this.pendingd = this.restoreLocalSetting("pendingd", [], !0), this.pendingdNames = [], this.operatord = this.restoreLocalSetting("operatord", [], !0), this.operatordNames = [], this.closedd = this.restoreLocalSetting("closedd", [], !0), this.closeddNames = [], this.storeLocalSetting = function (t, e) { if (localStorage) var e = localStorage.setItem(t, e) }, this.toggleList = function (e) { if (t[e] = !t[e], localStorage) try { localStorage.setItem(e, t[e]) } catch (i) { } }, t.getSyncFilter = function () { var t = "/(limita)/" + parseInt(l.limita); return t += "/(limitu)/" + parseInt(l.limitu), t += "/(limitp)/" + parseInt(l.limitp), t += "/(limito)/" + parseInt(l.limito), t += "/(limitc)/" + parseInt(l.limitc), t += "/(limitd)/" + parseInt(l.limitd), "object" == typeof l.actived && l.actived.length > 0 && (t += "/(actived)/" + l.actived.join("/")), "object" == typeof l.unreadd && l.unreadd.length > 0 && (t += "/(unreadd)/" + l.unreadd.join("/")), "object" == typeof l.pendingd && l.pendingd.length > 0 && (t += "/(pendingd)/" + l.pendingd.join("/")), "object" == typeof l.operatord && l.operatord.length > 0 && (t += "/(operatord)/" + l.operatord.join("/")), "object" == typeof l.closedd && l.closedd.length > 0 && (t += "/(closedd)/" + l.closedd.join("/")), "object" == typeof l.departmentd && l.departmentd.length > 0 && (t += "/(departmentd)/" + l.departmentd.join("/")), t }, t.$watch("lhc.limita", function (e, i) { e != i && (l.storeLocalSetting("limita", e), t.loadChatList()) }), this.setUpListNames = function (t) { angular.forEach(t, function (t) { l[t + "Names"] = [], angular.forEach(l[t], function (e) { l[t + "Names"].push(l.userDepartmentsNames[e]) }) }) }, this.setDepartmentNames = function (t) { l[t + "Names"] = [], angular.forEach(l[t], function (e) { l[t + "Names"].push(l.userDepartmentsNames[e]) }) }, this.departmentChanged = function (e) { if (l[e].length > 0) { var i = l[e].join("/"); "" != i && (l.storeLocalSetting(e, i), l.setDepartmentNames(e)) } else if (localStorage) try { localStorage.removeItem(e) } catch (a) { } t.loadChatList() }, t.$watch("lhc.limitu", function (e, i) { e != i && (l.storeLocalSetting("limitu", e), t.loadChatList()) }), t.$watch("lhc.limitp", function (e, i) { e != i && (l.storeLocalSetting("limitp", e), t.loadChatList()) }), t.$watch("lhc.limito", function (e, i) { e != i && (l.storeLocalSetting("limito", e), t.loadChatList()) }), t.loadChatList = function () { if (localStorage) try { t.pending_chats_expanded = "false" != localStorage.getItem("pending_chats_expanded"), t.active_chats_expanded = "false" != localStorage.getItem("active_chats_expanded"), t.my_active_chats_expanded = "false" != localStorage.getItem("my_active_chats_expanded"), t.closed_chats_expanded = "false" != localStorage.getItem("closed_chats_expanded"), t.unread_chats_expanded = "false" != localStorage.getItem("unread_chats_expanded"), t.custom_list_1_expanded = "false" != localStorage.getItem("custom_list_1_expanded"), t.custom_list_2_expanded = "false" != localStorage.getItem("custom_list_2_expanded"), t.custom_list_3_expanded = "false" != localStorage.getItem("custom_list_3_expanded"), t.custom_list_4_expanded = "false" != localStorage.getItem("custom_list_4_expanded") } catch (e) { } clearTimeout(t.timeoutControl), o.loadChatList(t.getSyncFilter()).then(function (e) { var i = !1, a = 0; angular.forEach(e.result, function (e, n) { t[n] = e, e.last_id_identifier && (void 0 == lhinst.trackLastIDS[e.last_id_identifier] ? lhinst.trackLastIDS[e.last_id_identifier] = parseInt(e.last_id) : lhinst.trackLastIDS[e.last_id_identifier] < parseInt(e.last_id) ? (lhinst.trackLastIDS[e.last_id_identifier] = parseInt(e.last_id), a != lhinst.trackLastIDS[e.last_id_identifier] && (a = lhinst.trackLastIDS[e.last_id_identifier], lhinst.playSoundNewAction(e.last_id_identifier, parseInt(e.last_id), e.nick ? e.nick : "Live Help", e.msg ? e.msg : confLH.transLation.new_chat), l.lastidEvent = parseInt(e.last_id))) : lhinst.trackLastIDS[e.last_id_identifier] > parseInt(e.last_id) && (lhinst.trackLastIDS[e.last_id_identifier] = parseInt(e.last_id)), 0 == e.last_id && (lhinst.trackLastIDS[e.last_id_identifier] = 0), parseInt(e.last_id) > 0 && l.lastidEvent == e.last_id && (i = !0)) }), 0 == i && lhinst.hideNotifications(), 0 == t.pending_chats.length && clearTimeout(lhinst.soundIsPlaying), 1 == t.setTimeoutEnabled && (t.timeoutControl = setTimeout(function () { t.loadChatList() }, confLH.back_office_sinterval)) }, function (e) { t.timeoutControl = setTimeout(function () { t.loadChatList() }, confLH.back_office_sinterval) }) }, this.previewChat = function (t) { lhc.previewChat(t) }, this.redirectContact = function (t, e) { return lhinst.redirectContact(t, e) }, this.startChatNewWindow = function (t, e) { return lhinst.startChatNewWindow(t, e) }, this.deleteChat = function (t, e, i) { return lhinst.deleteChat(t, e, i) }, this.getLimitChat = function () { return this.limitc = this.restoreLocalSetting("limitc", 0, !0), this.limitc }, this.getLimitAssign = function () { return this.limitd = this.restoreLocalSetting("limitd", 0, !0), this.limitd }, this.loggedUsers = function (t) { if (this.limitd = this.restoreLocalSetting("limitd", 0, !0), this.limitc = this.restoreLocalSetting("limitc", 0, !0), 0 == this.limitd) this.limitd = t, this.limitc = 0, l.storeLocalSetting("limitd", this.limitd), l.storeLocalSetting("limitc", this.limitc); else { var e = !1; if (this.limitd.forEach(function (i) { i == t && (e = !0) }), !e) { var i = new Array, a = new Array, n = 0, s = 0; this.limitd.forEach(function (t) { i[n] = t, n++ }), this.limitc.forEach(function (t) { a[s] = t, s++ }), i[n] = t, a[s] = 0, l.storeLocalSetting("limitd", i), l.storeLocalSetting("limitc", a) } } }, this.startChat = function (t, e) { return $("#tabs").size() > 0 ? lhinst.startChat(t, $("#tabs"), e) : void lhinst.startChatNewWindow(t, e) }, this.logout = function (t) { var e = new Array, i = 0; this.limitd.forEach(function (a) { a == t || (e[i] = a, i++) }), l.storeLocalSetting("limitd", e) }, this.increaseChatCount = function (t) { this.limitd = this.restoreLocalSetting("limitd", 0, !0); var e = 0; this.limitd.forEach(function (i) { i == t && (l.limitc = l.restoreLocalSetting("limitc", 0, !0), l.limitc[e]++), e++ }), l.storeLocalSetting("limitc", this.limitc), l.storeLocalSetting("limitd", this.limitd) }, this.start = function (t) { l.limitd = this.restoreLocalSetting("limitd", 0, !0), l.limitc = l.restoreLocalSetting("limitc", 0, !0); var e = l.limitd[0], i = 0, a = 0; return l.limitc.forEach(function (t) { e >= t && (a = i, e = t), i++ }), l.limitd[a] == t ? !0 : !1 }, this.startChatNewWindowTransfer = function (t, e, i) { return lhinst.startChatNewWindowTransfer(t, e, i) }, this.startChatTransfer = function (t, e, i) { return lhinst.startChatTransfer(t, $("#tabs"), e, i) }, this.startChatOperator = function (t) { window.open(WWW_DIR_JAVASCRIPT + "chat/startchatwithoperator/" + t, "operatorchatwindow-" + t, "menubar=1,resizable=1,width=780,height=450") }, this.onlineOps = function (t) { alert(t) }, t.clicki = 1, this.setClick = function (e) { t.clicki = e }, t.loadChatList() }]);